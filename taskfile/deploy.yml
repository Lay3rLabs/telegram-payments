version: "3"

tasks:
  clean:
    cmds:
      - rm -rf "{{.DEPLOYMENTS_ARTIFACTS_PATH}}"

  ###################################################################
  ######################## ALL  #####################################
  ###################################################################

  all:
    deps:
      [
        all-upload-contracts,
        all-upload-components,
        all-log-skip-upload-contracts,
        all-log-skip-upload-components,
      ]
    cmds:
      - task: middleware-instantiate
        vars:
          MANAGER_CODE_ID:
            sh: cat "{{.DEPLOYMENTS_ARTIFACTS_PATH}}/service-manager-code-id.json" | jq -r '.code_id'
          REGISTRY_CODE_ID:
            sh: cat "{{.DEPLOYMENTS_ARTIFACTS_PATH}}/stake-registry-code-id.json" | jq -r '.code_id'
          FILENAME: middleware.json
      - task: contract-instantiate-payments
        vars:
          CODE_ID:
            sh: cat "{{.DEPLOYMENTS_ARTIFACTS_PATH}}/payments-code-id.json" | jq -r '.code_id'
          FILENAME: payments.json
      - task: upload-and-set-service
        vars:
          ACTIVATE: "true"
      - task: aggregator-register-service
        vars:
          ADDR:
            sh: cat "{{.DEPLOYMENTS_ARTIFACTS_PATH}}/service-cid.json" | jq -r '.service.manager.cosmos.address'
      - task: operator-add-service
        vars:
          ADDR:
            sh: cat "{{.DEPLOYMENTS_ARTIFACTS_PATH}}/service-cid.json" | jq -r '.service.manager.cosmos.address'
      - task: operator-set-signing-key
        vars:
          WEIGHT: "{{.WEIGHT | default .DEFAULT_MIDDLEWARE_SIGNER_WEIGHT}}"
          FILENAME: "operator-signing-key.json"
      - echo ""
      - echo "✅ Deployment completed! Artifacts are in {{.DEPLOYMENTS_ARTIFACTS_PATH}}"
      - echo ""
      - task: post-deploy-all

  post-deploy-all:
    vars:
      SERVICE_URI:
        sh: cat "{{.DEPLOYMENTS_ARTIFACTS_PATH}}/service-cid.json" | jq -r '.uri'
      SERVICE_GATEWAY_URL:
        sh: cat "{{.DEPLOYMENTS_ARTIFACTS_PATH}}/service-cid.json" | jq -r '.gateway_url'
      SERVICE_MANAGER:
        sh: cat "{{.DEPLOYMENTS_ARTIFACTS_PATH}}/service-cid.json" | jq -r '.service.manager.cosmos.address'
    cmds:
      - |
        echo "Service Manager Address: {{.SERVICE_MANAGER}}"
      - |
        echo "Service URI: {{.SERVICE_URI}}"
      - |
        echo "Service URL: {{.SERVICE_GATEWAY_URL}}"

  activate-service:
    vars:
      ACTIVATE: "true"
    cmds:
      - task: upload-and-set-service

  upload-and-set-service:
    required:
      vars: [ACTIVATE]
    cmds:
      - task: service-upload
        vars:
          CONTRACT_PAYMENTS: "{{.DEPLOYMENTS_ARTIFACTS_PATH}}/payments.json"
          MIDDLEWARE: "{{.DEPLOYMENTS_ARTIFACTS_PATH}}/middleware.json"
          COMPONENT_OPERATOR_COMMANDER: "{{.DEPLOYMENTS_ARTIFACTS_PATH}}/operator-commander-cid.json"
          COMPONENT_OPERATOR_REPORTER: "{{.DEPLOYMENTS_ARTIFACTS_PATH}}/operator-reporter-cid.json"
          COMPONENT_AGGREGATOR_SUBMITTER: "{{.DEPLOYMENTS_ARTIFACTS_PATH}}/aggregator-submitter-cid.json"
          COMPONENT_AGGREGATOR_MESSENGER: "{{.DEPLOYMENTS_ARTIFACTS_PATH}}/aggregator-messenger-cid.json"
          FILENAME: service-cid.json
          ACTIVATE: "{{.ACTIVATE}}"
      - task: middleware-set-service-uri
        vars:
          ADDR:
            sh: cat "{{.DEPLOYMENTS_ARTIFACTS_PATH}}/service-cid.json" | jq -r '.service.manager.cosmos.address'
          URI:
            sh: cat "{{.DEPLOYMENTS_ARTIFACTS_PATH}}/service-cid.json" | jq -r '.gateway_url'

  all-upload-contracts:
    vars:
      SKIP_UPLOAD_CONTRACTS: '{{ .SKIP_UPLOAD_CONTRACTS | default "false" }}'
    status:
      - '[ "{{.SKIP_UPLOAD_CONTRACTS}}" = "true" ]'
    cmds:
      - task: middleware-service-manager-upload
        vars:
          FILENAME: service-manager-code-id.json
      - task: middleware-stake-registry-upload
        vars:
          FILENAME: stake-registry-code-id.json
      - task: contract-upload
        vars:
          CONTRACT: payments
          FILENAME: payments-code-id.json

  all-upload-components:
    vars:
      SKIP_UPLOAD_COMPONENTS: '{{ .SKIP_UPLOAD_COMPONENTS | default "false" }}'
    status:
      - '[ "{{.SKIP_UPLOAD_COMPONENTS}}" = "true" ]'
    cmds:
      - task: component-upload
        vars:
          COMPONENT: commander
          KIND: operator
          FILENAME: operator-commander-cid.json
      - task: component-upload
        vars:
          COMPONENT: reporter
          KIND: operator
          FILENAME: operator-reporter-cid.json
      - task: component-upload
        vars:
          COMPONENT: messenger
          KIND: aggregator
          FILENAME: aggregator-messenger-cid.json
      - task: component-upload
        vars:
          COMPONENT: submitter
          KIND: aggregator
          FILENAME: aggregator-submitter-cid.json

  all-log-skip-upload-contracts:
    vars:
      SKIP_UPLOAD_CONTRACTS: '{{ .SKIP_UPLOAD_CONTRACTS | default "false" }}'
    status:
      - '[ "{{.SKIP_UPLOAD_CONTRACTS}}" != "true" ]'
    cmds:
      - echo ""
      - echo "ℹ️  Skipping contract uploads."
      - echo ""

  all-log-skip-upload-components:
    vars:
      SKIP_UPLOAD_COMPONENTS: '{{ .SKIP_UPLOAD_COMPONENTS | default "false" }}'
    status:
      - '[ "{{.SKIP_UPLOAD_COMPONENTS}}" != "true" ]'
    cmds:
      - echo ""
      - echo "ℹ️  Skipping component uploads."
      - echo ""

  ###################################################################
  ######################## CONTRACT #################################
  ###################################################################

  contract-upload:
    deps: [assert-account-exists]
    requires:
      vars: [CONTRACT, FILENAME]
    cmds:
      - echo "🚀 Uploading contract {{.CONTRACT}}..."
      - cd packages/cli && cargo run upload-contract --kind {{.CONTRACT}} --output-filename={{.FILENAME}}

  contract-instantiate-payments:
    deps: [assert-account-exists]
    requires:
      vars: [FILENAME, CODE_ID]
    vars:
      AUTH_ADDRESS:
        sh: cat "{{.DEPLOYMENTS_ARTIFACTS_PATH}}/middleware.json" | jq -r '.service_manager_address'
      AUTH_KIND: "service_manager"
    cmds:
      - echo "🚀 Instantiating Payments contract..."
      - cd packages/cli && cargo run instantiate-payments --output-filename={{.FILENAME}} --code-id={{.CODE_ID}} --auth-address={{.AUTH_ADDRESS}} --auth-kind={{.AUTH_KIND}}

  ###################################################################
  ######################## FAUCET   #################################
  ###################################################################

  tap-faucet:
    cmds:
      - task: inner-tap-faucet
        vars:
          MNEMONIC: "CLI_MNEMONIC"

  tap-faucet-all:
    cmds:
      - for: { var: ALL_MNEMONICS_TO_FUND }
        task: inner-tap-faucet
        vars:
          MNEMONIC: "{{.ITEM}}"

  inner-tap-faucet:
    internal: true
    vars:
      MNEMONIC_VALUE:
        sh: echo "${{.MNEMONIC}}"
    env:
      CLI_MNEMONIC: "{{.MNEMONIC_VALUE}}"
    cmds:
      - cd packages/cli && cargo run faucet-tap

  assert-account-exists:
    cmds:
      - cd packages/cli && cargo run assert-account-exists

  ###################################################################
  ######################## COMPONENTS ###############################
  ###################################################################

  component-upload:
    requires:
      vars: [COMPONENT, KIND, FILENAME]
    vars:
      IPFS_API_URL: "http://127.0.0.1:{{.IPFS_API_PORT}}"
      IPFS_GATEWAY_URL: "http://127.0.0.1:{{.IPFS_GATEWAY_PORT}}"
    cmds:
      - echo "🚀 Uploading component {{.COMPONENT}} to IPFS..."
      - cd packages/cli && cargo run upload-component --kind {{.KIND}} --component {{.COMPONENT}} --output-filename={{.FILENAME}} --ipfs-api-url {{.IPFS_API_URL}} --ipfs-gateway-url {{.IPFS_GATEWAY_URL}}

  ###################################################################
  ######################## MIDDLEWARE ###############################
  ###################################################################

  middleware-service-manager-upload:
    deps: [assert-account-exists]
    requires:
      vars: [FILENAME]
    cmds:
      - echo "🚀 Uploading middleware service-manager contract..."
      - mkdir -p "{{.ARTIFACTS_PATH}}"
      - >
        docker run --rm
        --network host
        -v "{{.WAVS_HOME_DIR}}":/wavs-home:ro
        -v "{{.DEPLOYMENTS_ARTIFACTS_PATH}}":/output
        -e CHAIN_KEY="{{.CHAIN_KEY}}"
        -e WAVS_HOME="/wavs-home"
        -e CLI_MNEMONIC="{{.CLI_MNEMONIC}}"
        {{.WAVS_CW_MIDDLEWARE_DOCKER_IMAGE}}
        service-manager upload --contract-kind mirror
        --output-path "/output/{{.FILENAME}}"

  middleware-stake-registry-upload:
    deps: [assert-account-exists]
    requires:
      vars: [FILENAME]
    cmds:
      - echo "🚀 Uploading middleware stake-registry contract..."
      - mkdir -p "{{.ARTIFACTS_PATH}}"
      - >
        docker run --rm
        --network host
        -v "{{.WAVS_HOME_DIR}}":/wavs-home:ro
        -v "{{.DEPLOYMENTS_ARTIFACTS_PATH}}":/output
        -e CHAIN_KEY="{{.CHAIN_KEY}}"
        -e WAVS_HOME="/wavs-home"
        -e CLI_MNEMONIC="{{.CLI_MNEMONIC}}"
        {{.WAVS_CW_MIDDLEWARE_DOCKER_IMAGE}}
        registry upload --contract-kind mirror_stake
        --output-path "/output/{{.FILENAME}}"

  middleware-instantiate:
    deps: [assert-account-exists]
    requires:
      vars: [MANAGER_CODE_ID, REGISTRY_CODE_ID, FILENAME]
    vars:
      THRESHOLD: "{{.THRESHOLD | default .DEFAULT_MIDDLEWARE_THRESHOLD}}"
      STRATEGIES: "{{.STRATEGIES | default .DEFAULT_MIDDLEWARE_STRATEGIES}}"
    cmds:
      - echo "🚀 Instantiating middleware contracts..."
      - mkdir -p "{{.ARTIFACTS_PATH}}"
      - >
        docker run --rm
        --network host
        -v "{{.WAVS_HOME_DIR}}":/wavs-home:ro
        -v "{{.DEPLOYMENTS_ARTIFACTS_PATH}}":/output
        -e CHAIN_KEY="{{.CHAIN_KEY}}"
        -e WAVS_HOME="/wavs-home"
        -e CLI_MNEMONIC="{{.CLI_MNEMONIC}}"
        {{.WAVS_CW_MIDDLEWARE_DOCKER_IMAGE}}
        registry instantiate-mirror-stake
        --code-id {{.REGISTRY_CODE_ID}}
        --service-manager-code-id {{.MANAGER_CODE_ID}}
        --threshold-weight {{.THRESHOLD}}
        --strategy {{.STRATEGIES}}
        --output-path "/output/{{.FILENAME}}"

  ###################################################################
  ################### OPERATOR / STAKE REGISTRY #####################
  ###################################################################
  operator-set-signing-key:
    requires:
      vars: [FILENAME]
    vars:
      OPERATORS_RANGE:
        sh: seq 1 {{.OPERATORS | default "1"}}
    cmds:
      - for: { var: OPERATORS_RANGE }
        task: operator-set-signing-key-{{.ITEM}}
        vars:
          WEIGHT: "{{.WEIGHT}}"
          FILENAME: "{{.FILENAME}}"

  operator-set-signing-key-*:
    deps: [assert-account-exists]
    requires:
      vars: [WEIGHT, FILENAME]
    vars:
      WEIGHT: "{{.WEIGHT | default .DEFAULT_MIDDLEWARE_SIGNER_WEIGHT}}"
      WAVS_INSTANCE: "{{index .MATCH 0}}"
      OPERATOR_MNEMONIC:
        sh: task backend:get-wavs-operator-mnemonic-{{.WAVS_INSTANCE}}
      EVM_OPERATOR_ADDRESS:
        sh: cast wallet address --mnemonic "{{.OPERATOR_MNEMONIC}}"
      SERVICE_MANAGER_ADDRESS:
        sh: cat "{{.DEPLOYMENTS_ARTIFACTS_PATH}}/middleware.json" | jq -r '.service_manager_address'
      STAKE_REGISTRY_ADDRESS:
        sh: cat "{{.DEPLOYMENTS_ARTIFACTS_PATH}}/middleware.json" | jq -r '.registry_address'
      WAVS_PORT:
        sh: task backend:get-wavs-operator-port-{{.WAVS_INSTANCE}}
      WAVS_URL: "http://127.0.0.1:{{.WAVS_PORT}}"
    cmds:
      - echo "🚀 Setting signing key on service manager {{.SERVICE_MANAGER_ADDRESS}}..."
      - >
        cd packages/cli && cargo run operator-set-signing-key
        --wavs-instance={{.WAVS_INSTANCE}}
        --output-filename={{.FILENAME}}
        --service-manager-address={{.SERVICE_MANAGER_ADDRESS}}
        --stake-registry-address={{.STAKE_REGISTRY_ADDRESS}}
        --evm-operator-address={{.EVM_OPERATOR_ADDRESS}}
        --wavs-url={{.WAVS_URL}}
        --weight={{.WEIGHT}}

  ###################################################################
  ######################## SERVICE ##################################
  ###################################################################

  service-upload:
    requires:
      vars:
        [
          CONTRACT_PAYMENTS,
          MIDDLEWARE,
          COMPONENT_OPERATOR_COMMANDER,
          COMPONENT_OPERATOR_REPORTER,
          COMPONENT_AGGREGATOR_MESSENGER,
          COMPONENT_AGGREGATOR_SUBMITTER,
          FILENAME,
          ACTIVATE,
        ]
    vars:
      SERVER: "http://127.0.0.1:{{.SERVER_PORT}}"
      DEFAULT_SERVER_COMPONENT_ENDPOINT: "{{.NGROK_URL | default .SERVER}}/telegram-component"
      SERVER_COMPONENT_ENDPOINT: "{{.SERVER_COMPONENT_ENDPOINT | default .DEFAULT_SERVER_COMPONENT_ENDPOINT}}"
      IPFS_API_URL: "http://127.0.0.1:{{.IPFS_API_PORT}}"
      IPFS_GATEWAY_URL: "http://127.0.0.1:{{.IPFS_GATEWAY_PORT}}"
      AGGREGATOR_URL: "http://127.0.0.1:{{.WAVS_AGGREGATOR_PORT}}"
      TELEGRAM_GROUP_ID: "{{.TELEGRAM_GROUP_ID | default .WAVS_AGGREGATOR_TELEGRAM_GROUP_ID}}"
    cmds:
      - echo "🚀 Uploading Service JSON to IPFS ..."
      - >
        cd packages/cli && cargo run upload-service
        --output-filename={{.FILENAME}}
        --ipfs-api-url={{.IPFS_API_URL}}
        --ipfs-gateway-url={{.IPFS_GATEWAY_URL}}
        --contract-payments-instantiation-file="{{.CONTRACT_PAYMENTS}}"
        --middleware-instantiation-file="{{.MIDDLEWARE}}"
        --component-operator-commander-cid-file="{{.COMPONENT_OPERATOR_COMMANDER}}"
        --component-operator-reporter-cid-file="{{.COMPONENT_OPERATOR_REPORTER}}"
        --component-aggregator-messenger-cid-file="{{.COMPONENT_AGGREGATOR_MESSENGER}}"
        --component-aggregator-submitter-cid-file="{{.COMPONENT_AGGREGATOR_SUBMITTER}}"
        --server-component-endpoint="{{.SERVER_COMPONENT_ENDPOINT}}"
        --cron-schedule="{{.SERVICE_CRON_SCHEDULE}}"
        --aggregator-url={{.AGGREGATOR_URL}}
        {{ if eq .ACTIVATE "true" }} --activate {{ end }}

  middleware-set-service-uri:
    deps: [assert-account-exists]
    requires:
      vars: [ADDR, URI]
    cmds:
      - echo "🚀 Setting Service URI on service-manager contract..."
      - >
        docker run --rm
        --network host
        -v "{{.WAVS_HOME_DIR}}":/wavs-home:ro
        -v "{{.DEPLOYMENTS_ARTIFACTS_PATH}}":/output
        -e CHAIN_KEY="{{.CHAIN_KEY}}"
        -e WAVS_HOME="/wavs-home"
        -e CLI_MNEMONIC="{{.CLI_MNEMONIC}}"
        {{.WAVS_CW_MIDDLEWARE_DOCKER_IMAGE}}
        service-manager set-service-uri
        --address "{{.ADDR}}"
        --uri "{{.URI}}"

  aggregator-register-service:
    requires:
      vars: [ADDR]
    vars:
      AGGREGATOR_URL: "http://127.0.0.1:{{.WAVS_AGGREGATOR_PORT}}"
    cmds:
      - echo "🚀 Registering service on aggregator..."
      - >
        cd packages/cli && cargo run aggregator-register-service
        --aggregator-url {{.AGGREGATOR_URL}}
        --service-manager-address "{{.ADDR}}"

  operator-add-service:
    vars:
      OPERATORS_RANGE:
        sh: seq 1 {{.OPERATORS | default "1"}}
      ADDR_FROM_FILE:
        sh: cat "{{.DEPLOYMENTS_ARTIFACTS_PATH}}/service-cid.json" | jq -r '.service.manager.cosmos.address'
      ADDR: "{{.ADDR | default .ADDR_FROM_FILE}}"
    cmds:
      - for: { var: OPERATORS_RANGE }
        task: operator-add-service-{{.ITEM}}-{{.ADDR}}

  operator-add-service-*-*:
    vars:
      WAVS_INSTANCE: "{{index .MATCH 0}}"
      ADDR: "{{index .MATCH 1}}"
      WAVS_PORT:
        sh: task backend:get-wavs-operator-port-{{.WAVS_INSTANCE}}
      WAVS_URL: "http://127.0.0.1:{{.WAVS_PORT}}"
    cmds:
      - echo "🚀 Adding service to operator {{.WAVS_INSTANCE}}..."
      - >
        cd packages/cli && cargo run operator-add-service
        --wavs-url {{.WAVS_URL}}
        --service-manager-address "{{.ADDR}}"

  operator-delete-service:
    vars:
      OPERATORS_RANGE:
        sh: seq 1 {{.OPERATORS | default "1"}}
      ADDR_FROM_FILE:
        sh: cat "{{.DEPLOYMENTS_ARTIFACTS_PATH}}/service-cid.json" | jq -r '.service.manager.cosmos.address'
      ADDR: "{{.ADDR | default .ADDR_FROM_FILE}}"
    cmds:
      - for: { var: OPERATORS_RANGE }
        task: operator-delete-service-{{.ITEM}}-{{.ADDR}}

  operator-delete-service-*-*:
    vars:
      WAVS_INSTANCE: "{{index .MATCH 0}}"
      ADDR: "{{index .MATCH 1}}"
      WAVS_PORT:
        sh: task backend:get-wavs-operator-port-{{.WAVS_INSTANCE}}
      WAVS_URL: "http://127.0.0.1:{{.WAVS_PORT}}"
    cmds:
      - echo "Deleting service for operator {{.WAVS_INSTANCE}}..."
      - >
        cd packages/cli && cargo run operator-delete-service
        --wavs-url {{.WAVS_URL}}
        --service-manager-address "{{.ADDR}}"
