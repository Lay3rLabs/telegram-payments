version: "3"

includes:
  config:
    taskfile: ./config.yml
    flatten: true

tasks:
  clean-all:
    cmds:
      - for: { var: ALL_OPERATOR_COMPONENTS }
        task: clean
        vars:
          COMPONENT: "{{ .ITEM }}"
          KIND: "operator"
      - for: { var: ALL_AGGREGATOR_COMPONENTS }
        task: clean
        vars:
          COMPONENT: "{{ .ITEM }}"
          KIND: "aggregator"
      - echo "Cleaning artifacts directory"
      - |
        rm -rf "{{.COMPONENTS_ARTIFACTS_PATH}}"

  clean:
    requires:
      vars: [COMPONENT, KIND]
    vars:
      PATH: "{{.COMPONENTS_ARTIFACTS_PATH}}/{{.KIND}}/{{.COMPONENT_PREFIX}}_{{.KIND}}_{{.COMPONENT}}_*"
    cmds:
      - echo "Cleaning {{.KIND}} {{.COMPONENT}} contracts from {{.PATH}}"
      - rm -rf "{{.PATH}}"

  build-all:
    cmds:
      - for: { var: ALL_OPERATOR_COMPONENTS, parallel: true }
        task: build
        vars:
          COMPONENT: "{{.ITEM}}"
          KIND: "operator"
      - for: { var: ALL_AGGREGATOR_COMPONENTS, parallel: true }
        task: build
        vars:
          COMPONENT: "{{.ITEM}}"
          KIND: "aggregator"

  build:
    requires:
      vars: [COMPONENT, KIND]
    vars:
      COMPONENT_SRC_NAME:
        sh: task components:src-name COMPONENT={{.COMPONENT}} KIND={{.KIND}}
      COMPONENT_PATH: "packages/components/{{.KIND}}/{{.COMPONENT}}"
      COMPONENT_FILE: "{{.COMPONENT_SRC_NAME}}.wasm"
      COMPONENT_PACKAGE: "tg-component-{{.KIND}}-{{.COMPONENT}}"
    cmds:
      - echo "Building {{.KIND}} component {{.COMPONENT}} at {{.COMPONENT_PATH}}"
      - cargo build --release --package {{.COMPONENT_PACKAGE}} --target wasm32-wasip2
      - mkdir -p "{{.COMPONENTS_ARTIFACTS_PATH}}"
      - cp "./target/wasm32-wasip2/release/{{.COMPONENT_FILE}}" "{{.COMPONENTS_ARTIFACTS_PATH}}/"

  src-name:
    requires:
      vars: [COMPONENT, KIND]
    cmds:
      - echo "{{.COMPONENT_PREFIX}}_{{.KIND}}_{{ replace "-" "_" .COMPONENT }}"

  ###################################################################
  ######################## WIT #####################################
  ###################################################################

  clean-wit-all:
    cmds:
      - for: { var: ALL_OPERATOR_COMPONENTS }
        task: clean-wit
        vars:
          COMPONENT: "{{.ITEM}}"
          KIND: "operator"

      - for: { var: ALL_AGGREGATOR_COMPONENTS }
        task: clean-wit
        vars:
          COMPONENT: "{{.ITEM}}"
          KIND: "aggregator"

  clean-wit:
    requires:
      vars: [COMPONENT, KIND]
    cmds:
      - echo "Cleaning WIT for component {{.KIND}} {{.COMPONENT}}"
      - rm -rf "./packages/components/{{.KIND}}/{{.COMPONENT}}/wit"

  fetch-wit-all:
    cmds:
      - task: fetch-wit-operator-commander
      - task: fetch-wit-operator-reporter
      - task: fetch-wit-aggregator-messenger
      - task: fetch-wit-aggregator-submitter

  fetch-wit:
    requires:
      vars: [COMPONENT, KIND]
    cmds:
      - task: fetch-wit-{{.KIND}}-{{.COMPONENT}}

  fetch-wit-operator-commander:
    internal: true
    cmds:
      - for: { var: COMPONENT_WITS_OPERATOR_COMMANDER }
        task: fetch-single-wit
        vars:
          WIT_ITEM: "{{.ITEM}}"
          COMPONENT: "commander"
          KIND: "operator"

  fetch-wit-operator-reporter:
    internal: true
    cmds:
      - for: { var: COMPONENT_WITS_OPERATOR_REPORTER }
        task: fetch-single-wit
        vars:
          WIT_ITEM: "{{.ITEM}}"
          COMPONENT: "reporter"
          KIND: "operator"

  fetch-wit-aggregator-messenger:
    internal: true
    cmds:
      - for: { var: COMPONENT_WITS_AGGREGATOR_MESSENGER }
        task: fetch-single-wit
        vars:
          WIT_ITEM: "{{.ITEM}}"
          COMPONENT: "messenger"
          KIND: "aggregator"

  fetch-wit-aggregator-submitter:
    internal: true
    cmds:
      - for: { var: COMPONENT_WITS_AGGREGATOR_SUBMITTER }
        task: fetch-single-wit
        vars:
          WIT_ITEM: "{{.ITEM}}"
          COMPONENT: "submitter"
          KIND: "aggregator"

  fetch-single-wit:
    internal: true
    requires:
      vars: [WIT_ITEM, COMPONENT, KIND]
    deps:
      - task: clean-wit
        vars:
          COMPONENT: "{{.COMPONENT}}"
          KIND: "{{.KIND}}"
    cmds:
      - echo "Fetching WIT for {{.KIND}} component {{.COMPONENT}} - {{.WIT_ITEM}}"
      - mkdir -p "./packages/components/{{.KIND}}/{{.COMPONENT}}/wit"
      - wkg get "{{.WIT_ITEM}}" --output "./packages/components/{{.KIND}}/{{.COMPONENT}}/wit/"
      - wkg wit fetch -d "./packages/components/{{.KIND}}/{{.COMPONENT}}/wit"
      - echo "Completed fetch for {{.WIT_ITEM}}"

  ###################################################################
  ######################## EXEC #####################################
  ###################################################################

  exec-operator-read-*:
    vars:
      READ_KIND: "{{index .MATCH 0}}"
    cmds:
      - >
        docker run --rm
        --network host
        -v "{{.WAVS_HOME_DIR}}":/wavs-home:ro
        -v "{{.COMPONENTS_ARTIFACTS_PATH}}":/components:ro
        -e WAVS_HOME="/wavs-home"
        -e CLI_MNEMONIC="{{.CLI_MNEMONIC}}"
        -e WAVS_ENV_OPERATOR_TELEGRAM_BOT_TOKEN="{{.WAVS_OPERATOR_TELEGRAM_BOT_TOKEN}}"
        {{.WAVS_DOCKER_IMAGE}}
        wavs-cli exec
        --log-level '{{.RUST_LOG | default "info"}}'
        --component /components/{{.COMPONENT_PREFIX}}_operator.wasm
        --input "read-{{.READ_KIND}}"
